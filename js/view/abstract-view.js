import {getElementFromTemplate} from '../render-screen';

/**
 *  Базовый класс для представлений
 *  @constructor
 */
export default class AbstractView {
  // Геттер template, который возвращает строку, содержащую разметку.
  // Метод должен быть абстрактным, то есть этот метод должен быть обязательно переопределен в объектах-наследниках
  get template() {
    throw new Error(`There is no template for view`);
  }

  // Геттер element, который возвращает DOM-элемент, соответствующий представлению.
  // Метод должен создавать DOM-элемент с помощью метода render, добавлять ему обработчики,
  // с помощью метода bind и возвращать созданный элемент. Метод должен использовать ленивые вычисления —
  // элемент должен создаваться при первом обращении к методу с помощью метода getMarkup,
  // должны добавляться обработчики (если возможно).
  // При последующих обращениях должен использоваться элемент, созданный при первом вызове метода.
  get element() {
    if (!this._element) {
      this._element = this.render();
      this.bind();
    }
    return this._element;
  }

  getMarkup() {
    return this.element;
  }

  // метод, который будет создавать DOM-элемент на основе шаблона, который возвращается геттером template
  render() {
    return getElementFromTemplate(this.template);
  }

  // метод, который будет добавлять обработчики событий. Метод по умолчанию ничего не делает.
  // Если нужно обработать какое-то событие, то этот метод должен быть переопределён в наследнике с необходимой логикой
  bind() {}
}
